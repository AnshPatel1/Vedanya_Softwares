# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'EntryWindow/Interfaces/AddProfileWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import mysql.connector
from PyQt5 import QtCore, QtGui, QtWidgets
# Connect to Database
from PyQt5.QtWidgets import QMessageBox

vhc_db = mysql.connector.connect(
    host="185.201.11.44",
    user="u257284371_ansh",
    password="ansh1Rutu"
)
cursor = vhc_db.cursor()


def check_client_exists(name):
    pass


def get_bank_id_by_name(name):
    cursor.execute("SELECT ID FROM u257284371_vedanya.banks WHERE NAME = '{}';".format(name))
    id = cursor.fetchone()
    return id[0]


def get_state_id_by_name(name):
    cursor.execute("SELECT ID FROM u257284371_vedanya.states WHERE NAME = '{}';".format(name))
    id = cursor.fetchone()
    return id[0]


def get_client_id_by_name(name):
    cursor.execute("SELECT ID FROM u257284371_vedanya.clients WHERE NAME = '{}';".format(name))
    id = cursor.fetchone()
    return id[0]


def get_state_name_by_id(id):
    cursor.execute("SELECT NAME FROM u257284371_vedanya.states WHERE ID = {}".format(id))
    return cursor.fetchall()[0]


def get_sr_name_by_id(id):
    cursor.execute("SELECT NAME FROM u257284371_vedanya.sr WHERE ID = {}".format(id))
    return cursor.fetchall()[0]


def get_sr_id_by_name(name):
    cursor.execute("SELECT ID FROM u257284371_vedanya.sr WHERE NAME = '{}';".format(name))
    id = cursor.fetchone()
    return id[0]


def get_state_abbreviation_by_id(id):
    cursor.execute("SELECT ABBREVIATION FROM u257284371_vedanya.states WHERE ID = {};".format(id))
    return cursor.fetchone()[0]


def perform_query_from_file(file_name):
    path = 'Queries/' + file_name
    with open(path, 'r') as q:
        cursor.execute(q.read(), multi=True)
    return cursor.fetchall()


def add_client(state, sr, name, mobile, city):
    state_id = get_state_id_by_name(state)
    sr_id = get_sr_id_by_name(sr)
    cursor.execute("INSERT INTO u257284371_vedanya.clients (STATE_ID, SR_ID, NAME, CITY) VALUES ({}, {}, '{}', "
                   "'{}'); ".format(state_id, sr_id, name, city))
    vhc_db.commit()


def add_sr(state, name, city):
    cursor.execute(
        "INSERT INTO u257284371_vedanya.sr (STATE_ID, NAME, CITY) VALUES ({}, '{}', '{}');".format(
            get_state_id_by_name(state), name,
            city))
    vhc_db.commit()


def fetch_clients_list():
    clist = [""]
    cursor.execute("SELECT NAME FROM u257284371_vedanya.clients")
    clients = cursor.fetchall()
    for x in clients:
        for y in x:
            clist.append(str(y))
    return clist


def fetch_available_states():
    slist = ['']
    cursor.execute("SELECT NAME FROM u257284371_vedanya.states")
    states = cursor.fetchall()
    for x in states:
        for y in x:
            slist.append(str(y))
    return slist


def fetch_sr_list():
    srlist = [""]
    cursor.execute("SELECT NAME FROM u257284371_vedanya.sr")
    sr = cursor.fetchall()
    for x in sr:
        for y in x:
            srlist.append(str(y))
    return srlist


def fetch_bank_list():
    bnlist = [""]
    cursor.execute("SELECT NAME FROM u257284371_vedanya.banks")
    sr = cursor.fetchall()
    for x in sr:
        for y in x:
            bnlist.append(str(y))
    return bnlist


def fetch_client_info(name):
    cursor.execute("SELECT * FROM u257284371_vedanya.clients WHERE NAME = '{}'".format(name))
    return cursor.fetchone()


def make_transaction_entry(bank_id, client_id, state_id, sr_id, amount, type, date):
    cursor.execute("SELECT BALANCE FROM u257284371_vedanya.banks WHERE ID = {}".format(bank_id))
    currentBalance = cursor.fetchone()[0]
    balance = currentBalance + int(amount)
    cursor.execute(
        "INSERT INTO u257284371_vedanya.transactions (BANK_ID, CLIENT_ID, STATE_ID, SR_ID, AMOUNT, BALANCE, TYPE, "
        "DATE) VALUES({}, {}, {}, {}, {}, {}, '{}', '{}')"
        ";".format(bank_id, client_id, state_id, sr_id, amount, balance, type, date))
    cursor.execute("UPDATE u257284371_vedanya.banks SET BALANCE = {} WHERE ID = {};".format(balance, bank_id))
    vhc_db.commit()


class Ui_AddProfileWindow(object):

    def setupUi(self, AddProfileWindow):
        AddProfileWindow.setObjectName("AddProfileWindow")
        AddProfileWindow.resize(1000, 492)
        AddProfileWindow.setStyleSheet("#AddProfileWindow{\n"
                                       "background-color: white;\n"
                                       "}\n"
                                       "")
        self.centralwidget = QtWidgets.QWidget(AddProfileWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(490, 20, 20, 440))
        self.line.setStyleSheet("#line{\n"
                                "\n"
                                "}")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 431, 101))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.static_8 = QtWidgets.QLabel(self.frame)
        self.static_8.setGeometry(QtCore.QRect(10, 10, 75, 75))
        self.static_8.setStyleSheet("border-style: solid;\n"
                                    "border-radius:500px;\n"
                                    "max-width:75px;\n"
                                    "max-height:75px;\n"
                                    "min-width:75px;\n"
                                    "min-height:75px;")
        self.static_8.setText("")
        self.static_8.setPixmap(QtGui.QPixmap("EntryWindow/Interfaces\\../../assets/client_img.png"))
        self.static_8.setScaledContents(True)
        self.static_8.setObjectName("static_8")
        self.static_7 = QtWidgets.QLabel(self.frame)
        self.static_7.setGeometry(QtCore.QRect(100, 20, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(36)
        self.static_7.setFont(font)
        self.static_7.setObjectName("static_7")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(520, 10, 431, 101))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.static_6 = QtWidgets.QLabel(self.frame_2)
        self.static_6.setGeometry(QtCore.QRect(10, 10, 75, 75))
        self.static_6.setStyleSheet("border-style: solid;\n"
                                    "border-radius:500px;\n"
                                    "max-width:75px;\n"
                                    "max-height:75px;\n"
                                    "min-width:75px;\n"
                                    "min-height:75px;")
        self.static_6.setText("")
        self.static_6.setPixmap(QtGui.QPixmap("EntryWindow/Interfaces\\../../assets/sr_img.png"))
        self.static_6.setScaledContents(True)
        self.static_6.setObjectName("static_6")
        self.static_5 = QtWidgets.QLabel(self.frame_2)
        self.static_5.setGeometry(QtCore.QRect(100, 20, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(36)
        self.static_5.setFont(font)
        self.static_5.setObjectName("static_5")
        self.submitNewClientBtn = QtWidgets.QPushButton(self.centralwidget)
        self.submitNewClientBtn.setGeometry(QtCore.QRect(410, 400, 70, 70))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.submitNewClientBtn.setFont(font)
        self.submitNewClientBtn.setStyleSheet("border-style: solid;\n"
                                              "border-radius:500px;\n"
                                              "max-width:70px;\n"
                                              "max-height:70px;\n"
                                              "min-width:70px;\n"
                                              "min-height:70px;")
        self.submitNewClientBtn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("EntryWindow/Interfaces\\../../assets/submit.png"), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        self.submitNewClientBtn.setIcon(icon)
        self.submitNewClientBtn.setIconSize(QtCore.QSize(70, 70))
        self.submitNewClientBtn.setObjectName("submitNewClientBtn")
        self.submitNewSRBtn = QtWidgets.QPushButton(self.centralwidget)
        self.submitNewSRBtn.setGeometry(QtCore.QRect(910, 400, 70, 70))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.submitNewSRBtn.setFont(font)
        self.submitNewSRBtn.setStyleSheet("border-style: solid;\n"
                                          "border-radius:500px;\n"
                                          "max-width:70px;\n"
                                          "max-height:70px;\n"
                                          "min-width:70px;\n"
                                          "min-height:70px;")
        self.submitNewSRBtn.setText("")
        self.submitNewSRBtn.setIcon(icon)
        self.submitNewSRBtn.setIconSize(QtCore.QSize(70, 70))
        self.submitNewSRBtn.setObjectName("submitNewSRBtn")
        self.static_11 = QtWidgets.QLabel(self.centralwidget)
        self.static_11.setGeometry(QtCore.QRect(12, 267, 90, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_11.setFont(font)
        self.static_11.setObjectName("static_11")
        self.static_9 = QtWidgets.QLabel(self.centralwidget)
        self.static_9.setGeometry(QtCore.QRect(12, 137, 101, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_9.setFont(font)
        self.static_9.setObjectName("static_9")
        self.static_10 = QtWidgets.QLabel(self.centralwidget)
        self.static_10.setGeometry(QtCore.QRect(12, 237, 90, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_10.setFont(font)
        self.static_10.setObjectName("static_10")
        self.static_12 = QtWidgets.QLabel(self.centralwidget)
        self.static_12.setGeometry(QtCore.QRect(12, 297, 90, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_12.setFont(font)
        self.static_12.setObjectName("static_12")
        self.NewClientName = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.NewClientName.setGeometry(QtCore.QRect(130, 140, 311, 26))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewClientName.setFont(font)
        self.NewClientName.setObjectName("NewClientName")
        self.NewClientSRNameSelection = QtWidgets.QComboBox(self.centralwidget)
        self.NewClientSRNameSelection.setGeometry(QtCore.QRect(130, 233, 311, 25))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewClientSRNameSelection.setFont(font)
        self.NewClientSRNameSelection.setObjectName("NewClientSRNameSelection")
        self.NewClientStateSelection = QtWidgets.QComboBox(self.centralwidget)
        self.NewClientStateSelection.setGeometry(QtCore.QRect(130, 263, 311, 25))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewClientStateSelection.setFont(font)
        self.NewClientStateSelection.setObjectName("NewClientStateSelection")
        self.NewClientCity = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.NewClientCity.setGeometry(QtCore.QRect(130, 293, 311, 26))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewClientCity.setFont(font)
        self.NewClientCity.setObjectName("NewClientCity")
        self.NewSRState = QtWidgets.QComboBox(self.centralwidget)
        self.NewSRState.setGeometry(QtCore.QRect(630, 193, 311, 25))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewSRState.setFont(font)
        self.NewSRState.setObjectName("NewSRState")
        self.static_2 = QtWidgets.QLabel(self.centralwidget)
        self.static_2.setGeometry(QtCore.QRect(520, 220, 90, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_2.setFont(font)
        self.static_2.setObjectName("static_2")
        self.static_4 = QtWidgets.QLabel(self.centralwidget)
        self.static_4.setGeometry(QtCore.QRect(520, 137, 90, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_4.setFont(font)
        self.static_4.setObjectName("static_4")
        self.static_3 = QtWidgets.QLabel(self.centralwidget)
        self.static_3.setGeometry(QtCore.QRect(520, 190, 90, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_3.setFont(font)
        self.static_3.setObjectName("static_3")
        self.NewSRCity = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.NewSRCity.setGeometry(QtCore.QRect(630, 223, 311, 26))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewSRCity.setFont(font)
        self.NewSRCity.setObjectName("NewSRCity")
        self.NewSRName = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.NewSRName.setGeometry(QtCore.QRect(630, 140, 311, 26))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewSRName.setFont(font)
        self.NewSRName.setObjectName("NewSRName")
        self.NewClientNumber = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.NewClientNumber.setGeometry(QtCore.QRect(130, 193, 311, 26))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.NewClientNumber.setFont(font)
        self.NewClientNumber.setObjectName("NewClientNumber")
        self.static_14 = QtWidgets.QLabel(self.centralwidget)
        self.static_14.setGeometry(QtCore.QRect(12, 197, 121, 30))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Light")
        font.setPointSize(10)
        self.static_14.setFont(font)
        self.static_14.setObjectName("static_14")
        AddProfileWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(AddProfileWindow)
        self.statusbar.setObjectName("statusbar")
        AddProfileWindow.setStatusBar(self.statusbar)

        self.retranslateUi(AddProfileWindow)
        QtCore.QMetaObject.connectSlotsByName(AddProfileWindow)

        # Custom Code Below:

        self.submitErrors = []
        print(self.submitErrors == [])
        # booleans
        self.isClientNameValid = False
        self.isClientCityValid = False
        self.isClientStateValid = False
        self.isClientNumberValid = False
        self.isClientSRValid = False
        self.isSRCityValid = False
        self.isSRStateValid = False
        self.isSRNameValid = False

        # connections
        self.NewClientCity.textChanged.connect(self.checkNewClientCity)
        self.NewClientName.textChanged.connect(self.checkNewClientName)
        self.NewClientNumber.textChanged.connect(self.checkNewClientNumber)
        self.NewClientSRNameSelection.currentTextChanged.connect(self.checkNewClientSRNameSelection)
        self.NewClientStateSelection.currentTextChanged.connect(self.checkNewClientStateSelection)
        self.NewSRCity.textChanged.connect(self.checkNewSRCity)
        self.NewSRState.currentTextChanged.connect(self.checkNewSRState)
        self.NewSRName.textChanged.connect(self.checkNewSRName)
        self.NewClientStateSelection.addItems(fetch_available_states())
        self.NewSRState.addItems(fetch_available_states())
        self.NewClientSRNameSelection.addItems(fetch_sr_list())
        self.submitNewClientBtn.clicked.connect(self.onAddNewClient)
        self.submitNewSRBtn.clicked.connect(self.onAddNewSR)
        self.NewClientNumber.setEnabled(False)

    def retranslateUi(self, AddProfileWindow):
        _translate = QtCore.QCoreApplication.translate
        AddProfileWindow.setWindowTitle(_translate("AddProfileWindow", "MainWindow"))
        self.static_7.setText(_translate("AddProfileWindow", "ADD CLIENT"))
        self.static_5.setText(_translate("AddProfileWindow", "ADD SR"))
        self.static_11.setText(_translate("AddProfileWindow", "STATE:"))
        self.static_9.setText(_translate("AddProfileWindow", "CLIENT NAME:"))
        self.static_10.setText(_translate("AddProfileWindow", "SR NAME:"))
        self.static_12.setText(_translate("AddProfileWindow", "CITY:"))
        self.static_2.setText(_translate("AddProfileWindow", "CITY:"))
        self.static_4.setText(_translate("AddProfileWindow", "SR NAME:"))
        self.static_3.setText(_translate("AddProfileWindow", "STATE:"))
        self.static_14.setText(_translate("AddProfileWindow", "CLIENT NUMBER:"))

    def onAddNewClient(self):
        self.submitErrors = []
        if not self.NewClientCity.toPlainText() == '':
            self.isClientCityValid = True
        else:
            self.submitErrors.append('Client city is not Valid')

        if not self.NewClientName.toPlainText() == '':
            self.isClientNameValid = True
        else:
            self.submitErrors.append('Client name is not Valid')

        if self.NewClientNumber.toPlainText() == '':
            self.isClientNumberValid = True
        else:
            self.submitErrors.append('Client number is not Valid')

        if not self.NewClientSRNameSelection.currentText() == '':
            self.isClientSRValid = True
        else:
            self.submitErrors.append('Client\'s SR is not Valid')

        if not self.NewClientStateSelection.currentText() == '':
            self.isClientStateValid = True
        else:
            self.submitErrors.append('Client\'s state is not Valid')

        cursor.execute(
            "SELECT EXISTS(SELECT NAME FROM u257284371_vedanya.clients WHERE NAME = '{}');".format(
                self.NewClientName.toPlainText()))
        exists = int(cursor.fetchone()[0])

        ClientValidity = False

        if exists == 0:
            ClientValidity = True
        else:
            self.submitErrors.append('THIS CLIENT ALREADY EXISTS')

        if self.isClientStateValid and ClientValidity and self.isClientSRValid and self.isClientNumberValid and self.isClientNameValid and self.isClientCityValid:
            self.showMessageBox(self.submitErrors)
            add_client(self.NewClientStateSelection.currentText(),
                       self.NewClientSRNameSelection.currentText(),
                       self.NewClientName.toPlainText(),
                       self.NewClientNumber.toPlainText(),
                       self.NewClientCity.toPlainText()
                       )
            self.NewClientStateSelection.setCurrentText('')
            self.NewClientSRNameSelection.setCurrentText('')
            self.NewClientName.clear()
            self.NewClientNumber.clear()
            self.NewClientCity.clear()
        else:
            self.showMessageBox(self.submitErrors)

    def onAddNewSR(self):
        self.submitErrors = []
        if not self.NewSRCity.toPlainText() == '':
            self.isSRCityValid = True
        else:
            self.submitErrors.append('SR City is not valid')

        if not self.NewSRName.toPlainText() == '':
            self.isSRNameValid = True
        else:
            self.submitErrors.append('SR Name is not valid')

        if not self.NewSRState.currentText() == '':
            self.isSRStateValid = True
        else:
            self.submitErrors.append('SR State is not valid')

        cursor.execute("SELECT EXISTS(SELECT NAME FROM u257284371_vedanya.sr WHERE NAME = '{}');".format(
            self.NewSRName.toPlainText()))
        exists = int(cursor.fetchone()[0])
        print(exists)
        SRValidity = False
        if exists == 0:
            SRValidity = True
        else:
            self.submitErrors.append('THIS SR ALREADY EXISTS')

        if self.isSRStateValid and self.isSRNameValid and self.isSRCityValid and SRValidity:
            self.showMessageBox(self.submitErrors)
            add_sr(self.NewSRState.currentText(), self.NewSRName.toPlainText(), self.NewSRCity.toPlainText())
            self.clear_and_update()
        else:
            self.showMessageBox(self.submitErrors)

    def clear_and_update(self):
        self.NewSRName.clear()
        self.NewSRCity.clear()
        self.NewSRState.clear()
        self.NewClientCity.clear()
        self.NewClientSRNameSelection.clear()
        self.NewClientStateSelection.clear()
        self.NewClientName.clear()
        self.NewClientSRNameSelection.addItems(fetch_sr_list())
        self.NewClientStateSelection.addItems(fetch_available_states())
        self.NewSRState.addItems(fetch_available_states())

    def showMessageBox(self, errors):
        if not errors == []:
            msg = ''
            for x in errors:
                msg = msg + '-  ' + x + '\n'
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QMessageBox{min-width: 700px;}")
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText('WARNING')
            msgBox.setInformativeText('PROFILE DETAILS ARE NOT VALID. CHECK THE DETAILS FOR CAUSES OF THIS ERROR')
            msgBox.setDetailedText(msg)
            msgBox.show()
            msgBox.exec_()

        if errors == []:
            msgBox = QMessageBox()
            msgBox.setStyleSheet("QMessageBox{min-width: 700px;}")
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText('SUCCESS! ')
            msgBox.setInformativeText('PROFILE SUCCESSFULLY ADDED. YOU MAY CLOSE THE DIALOGBOX')
            msgBox.show()
            msgBox.exec_()

    def disableClientSide(self):
        self.frame.setEnabled(False)
        self.static_9.setEnabled(False)
        self.static_10.setEnabled(False)
        self.static_11.setEnabled(False)
        self.static_12.setEnabled(False)
        self.static_14.setEnabled(False)
        self.NewClientCity.setEnabled(False)
        self.NewClientName.setEnabled(False)
        self.NewClientNumber.setEnabled(False)
        self.NewClientSRNameSelection.setEnabled(False)
        self.NewClientStateSelection.setEnabled(False)
        self.submitNewClientBtn.setEnabled(False)

    def disableSRSide(self):
        self.frame_2.setEnabled(False)
        self.static_2.setEnabled(False)
        self.static_3.setEnabled(False)
        self.static_4.setEnabled(False)
        self.NewSRCity.setEnabled(False)
        self.NewSRName.setEnabled(False)
        self.NewSRState.setEnabled(False)
        self.submitNewSRBtn.setEnabled(False)

    def enableClientSide(self):
        if self.NewSRState.currentText() == '' and self.NewSRName.toPlainText() == '' and self.NewSRCity.toPlainText() == '':
            self.frame.setEnabled(True)
            self.static_9.setEnabled(True)
            self.static_10.setEnabled(True)
            self.static_11.setEnabled(True)
            self.static_12.setEnabled(True)
            self.static_14.setEnabled(True)
            self.NewClientCity.setEnabled(True)
            self.NewClientName.setEnabled(True)
            self.NewClientSRNameSelection.setEnabled(True)
            self.NewClientStateSelection.setEnabled(True)
            self.submitNewClientBtn.setEnabled(True)

    def enableSRSide(self):
        if self.NewClientSRNameSelection.currentText() == '' and self.NewClientStateSelection.currentText() == '' and self.NewClientCity.toPlainText() == '' and self.NewClientNumber.toPlainText() == '' and self.NewClientName.toPlainText() == '':
            self.frame_2.setEnabled(True)
            self.static_2.setEnabled(True)
            self.static_3.setEnabled(True)
            self.static_4.setEnabled(True)
            self.NewSRCity.setEnabled(True)
            self.NewSRName.setEnabled(True)
            self.NewSRState.setEnabled(True)
            self.submitNewSRBtn.setEnabled(True)

    def checkNewClientCity(self):
        if self.NewClientCity.toPlainText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewClientCity.toPlainText() == '':
            self.enableClientSide()
            self.disableSRSide()

    def checkNewClientName(self):
        if self.NewClientName.toPlainText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewClientName.toPlainText() == '':
            self.enableClientSide()
            self.disableSRSide()

    def checkNewClientNumber(self):
        if self.NewClientNumber.toPlainText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewClientNumber.toPlainText() == '':
            self.enableClientSide()
            self.disableSRSide()

    def checkNewClientSRNameSelection(self):
        if self.NewClientSRNameSelection.currentText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewClientSRNameSelection.currentText() == '':
            self.enableClientSide()
            self.disableSRSide()

    def checkNewClientStateSelection(self):
        if self.NewClientStateSelection.currentText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewClientStateSelection.currentText() == '':
            self.enableClientSide()
            self.disableSRSide()

    def checkNewSRName(self):
        if self.NewSRName.toPlainText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewSRName.toPlainText() == '':
            self.disableClientSide()
            self.enableSRSide()

    def checkNewSRCity(self):
        if self.NewSRCity.toPlainText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewSRCity.toPlainText() == '':
            self.disableClientSide()
            self.enableSRSide()

    def checkNewSRState(self):
        if self.NewSRState.currentText() == '':
            self.enableClientSide()
            self.enableSRSide()
        if not self.NewSRState.currentText() == '':
            self.disableClientSide()
            self.enableSRSide()

    def closeEvent(self):
        print('FHGS')


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    AddProfileWindow = QtWidgets.QMainWindow()
    ui = Ui_AddProfileWindow()
    ui.setupUi(AddProfileWindow)
    AddProfileWindow.show()
    sys.exit(app.exec_())
